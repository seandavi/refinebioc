---
title: "Getting Started"
format: 
  html:
    toc: true
    html-math-method: mathjax
vignette: >
  %\VignetteIndexEntry{Getting Started}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
    collapse = TRUE,
    comment = "#>"
)
```

# Introduction

The `refinebioc` package is a collection of functions that can be used to refine Bioconductor objects. The package is designed to be used in conjunction with the `BiocFileCache` package, which provides a way to cache Bioconductor objects on disk. The `refinebioc` package provides functions to refine these cached objects, such as filtering, normalizing, and transforming data.

# Installation

You can install the `refinebioc` package from Bioconductor using the following code:

```{r eval=FALSE}
if (!requireNamespace("BiocManager", quietly = TRUE)) {
    install.packages("BiocManager")
}
BiocManager::install("seandavi/refinebioc")
```

# Usage

## Loading the package

```{r}
library(refinebioc)
rb_set_email_address("seandavi@gmail.com")
```

## Experiments

The `experiment_listing` function can be used to list all available experiments.

```{r eval=FALSE}
experiments <- get_experiment_catalog()
```

```{r cache=TRUE, include=FALSE}
experiments <- get_experiment_catalog(.pages = 3)
```

To get a feel for the data, we can look at the first few rows of the data frame.

```{r}
head(experiments)
```

The `experiments` variable contains a data frame. Standard dplyr functions can be used to filter and sort the data frame.

```{r}
library(dplyr)
experiments %>%
    dplyr::filter(grepl("GSE1133", accession_code)) %>%
    dplyr::select(accession_code, title)
```

## Loading an experiment

The `rb_get_experiment` function loads the experiment data into memory.
The refine.bio website and API, from which the data is loaded, prepares the
data asynchronously, so this function will wait until the data is ready, often
taking a few minutes. Do not interrupt the function while it is running.

```{r}
# Load the GSE1133 experiment
expts <- get_refinebio("GSE1133")
```

The `expts` variable contains a list of `SummarizedExperiment` objects. 

```{r}
expts$GSE1133
```

To view the sample information, use the `colData` function.

```{r}
SummarizedExperiment::colData(expts$GSE1133)
```

